--- 
title: Configuration
layout: default
filters:
  - erb
  - examples
  - textile
---

h1. Tutorial: Advanced Configuration

Arrow's configuration system provides quite a few ways to control the appserver, which it loads,
where it loads it from, and how it is cached, as well as facilities for adding configuration for 
your own applets.

h2. Appserver Configuration Items

Arrow's configuration is loaded via the @Arrow::Config@ class, which provides a @Struct@-like interface
to configuration values.

<notextile>
<dl class="linelist">
	<dt>logLevel</dt>
	<dd>This is related to the Apache log level; only messages at or
		above the specified level will be output to the log. However, this
		setting not only affects the output to Apache's ErrorLog, but also
		any other logging outputters you might have attached to the global
		logger. See the documentation on @Arrow::Logger@ for valid values 
		for this setting.</dd>
	<dd class="default-value">Defaults to <code>'notice'</code></dd>

	<dt>applets</dt>

 	<dd>This has options controlling how applet files are loaded into Arrow and how they are
    	accessed after loading.</dd>
	<dd class="subsection">
		<dl>
			<dt>missingApplet</dt>
			<dd>Specifies the URI of an applet which should be executed when the one specified by 
				the request's URI does not exist.</dd>
 	 		<dd class="default-value">The default is <code>/missing</code></dd>

			<dt>errorApplet</dt>
			<dd>This is the URI of the applet to which uncaught exceptions are sent.</dd>
			<dd class="default-value">Defaults to <code>/error</code></dd>
			
			<dt>pattern</dt>
			<dd>Glob pattern used to find applet files. This value is appended to each directory listed in 
				the <tt>path</tt> config item, and the files which match are loaded.</dd>
			<dd class="default-value">The default is <code>**/*.rb</code></dd>
			
			<dt>path</dt>
			<dd>An Array of directories which Arrow searches for applets. Arrow maintains a list of the files
			in these directories or any subdirectories for files which match the <tt>pattern</tt>, 
			reloading, removing, and updating them as they change.</dd>
			<dd class="default-value">The default paths are: <code>applets</code> and 
			<code>/www/applets</code></dd>
			
			<dt>pollInterval</dt>
			<dd>The number of seconds between checks for new and altered applets. If this is set to 
			<code>0</code>, applets are only loaded once, and never checked for updates.</dd>
			<dd class="default-value">The default is <code>5</code> seconds.</dd>
			
			<dt>config</dt>
			<dd>This is a freeform Hash value that can be used to provide key/value-pair type
			configuration for all registered applets. For more complex configurations, you can add
			members to the arrow config file itself should you so desire.</dd>
			<dd class="default-value">This defaults to an empty Hash.</dd>
					
			<dt>layout</dt>
			<dd>A Hash of URIs to applet classes. Each entry maps a sub-URI (relative to the Arrow
			URI) to an instance of the given applet class. URIs can be stacked on one another (e.g.,
			<code>/count</code> and <code>/count/hello</code> in the above example) to chain applets
			together. See the <a href="tutorial-apps.html">Applications and Applets</a> for more
			information about this section.</dd>
			<dd class="default-value">The default is an empty Hash, which means that every
			request will be handled by the <var>missingApplet</var>.</dd>
		</dl>
	</dd>

	<dt>templates</dt>
	<dd>The configuration of the templating system used by Arrow (if any).</dd>
  	<dd>
		<dl class="linelist config-subitems">
			<dt>loader</dt>
			<dd>This is the name of the loader class for the templating system you are using. For more
	    	information on how to use this, see the <a href="tutorial-templates.html">Templating Tutorial
	    	section</a>.</dd>
			<dd class="default-value">This defaults to <code>"Arrow::Template"</code>.</dd>

		  	<dt>path</dt>
			<dd>An Array of the paths that will be searched for templates. This path, in contrast to
	        the <tt>applets.path</tt> setting, will not be searched recursively, but you can still keep
	        templates in directories other than the topmost one by referring to them with relative
	        paths.</dd>
			<dd class="default-value">The default template paths are: <code>templates</code>, 
			<code>/www/templates</code></dd>

			<dt>cache</dt>
			<dd>Whether or not to cache templates. This setting is only guaranteed to have an effect on
			the built-in templating system; other systems may wish to provide their own caching via their
			loader class (i.e., the one in <code>templates.loader</code>).</dd>
			<dd class="default-value">This defaults to <code>true</code>.</dd>
		
			<dt>cacheConfig</dt>
			<dd>Settings which control template caching.</dd>
		
			<dd class="subsection">
				<dl class="linelist config-subitems">
				  <dt>maxNum</dt>
				  <dd>This sets the number of templates that will be cached. Templates beyond this number
		          will expire in <acronym title="least-recently used">LRU</acronym> order. The default is
					<code>20</code>.</dd>

				  <dt>maxSize</dt>
				  <dd>The maximum number of bytes allowed in the cache before it begins expiring items.
					Defaults to <code>2621440</code>, or 2.5Mb.</dd>

				  <dt>maxObjSize</dt>
				  <dd>The size (in bytes) of the largest single cacheable template. Templates larger than
		          this will not be cached.  Defaults to <code>131072</code>, or 128k.</dd>

				  <dt>expiration</dt>
				  <dd>The maximum number of seconds an object can stay in the cache after its last
		          access.  Defaults to <code>36</code> seconds.</dd>

				</dl>
			</dd>

		</dl>
	</dd>

  <dt>session</dt>
  <dd>This defines how sessions are implemented, stored, etc.</dd>
  <dd>
	<dl class="linelist config-subitems">
	  <dt>idName</dt>
	  <dd>The name of the cookie/parameter that contains the
	  session key.</dd>

	  <dt>expires</dt>
	  <dd>The expiration time to set on session cookies, in the format
	  given to Apache::Cookie.</dd>

	  <dt>idType</dt>
	  <dd>The URI containing the type and configuration of the
	  id-generation part of the session. The URI's scheme specifies the
	  type, and the path and/or query string can be used for further
	  configuration. See the documentation for the session id class for
	  more.</dd>

	  <dt>storeType</dt>
	  <dd>The URI of the type of session store to use; the URI for this
	  is used similarly to the one for idType.</dd>

	  <dt>lockType</dt>
	  <dd>The URI of the type of lock to use, or <tt>'recommended'</tt>,
	  which will consult the the session store for its recommended
	  locking strategy.</dd>

	</dl>
  </dd>
</dl>
</notextile>


Stuff to add:

* Running Arrow in production:
  - the DispatcherLoader
  - loading Arrow from the ChildInitHandler
* The root-dispatcher RubyOpt

Stuff to file:
* Config file cannot be totally empty, as YAML returns nil



