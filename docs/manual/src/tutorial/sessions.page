---
title: Sessions
template: tutorial
filters:
  - erb
  - links
  - examples
  - editorial
  - api
  - textile
---

h1. Sessions

A functional web interface needs to be able to treat each person accessing the site as an
individual. The way this works out in practice is by associating a "session" with each user, through
the use of a single cookie on the client machine referencing that particular user's data stored on
the web server. There are other less secure and less practical ways of acomplishing this, but
experience has led the world to accept this as standard.


h2. Session Types and Plugins

Within that standard, however, a number of variations have developed on the actual implementation.
Arrow comes standard with a couple of these, as well as offering an easily configured plugin
architecture for implementing any of the others.

The Arrow configuration file has a section on sessions, wherein you can decide how sessions should
behave.


<?example { language: yaml, test: true, caption: 'Session configuration' } ?>
session: 
  lockType: recommended
  storeType: file:/tmp/sessions
  idType: md5:.
  idName: session
  rewriteUrls: false
<?end?>

<dl class="linelist">
	<dt>expires</dt>
	<dd>This sets the default length of time that a session will
		remain active without use.</dd>

	<dt>idType</dt>
	<dd>The URI of the type of session id to use.</dd>

	<dt>storeType</dt>
	<dd>The URI of the type of session store to use.</dd>

	<dt>lockType</dt>
	<dd>The URI of the type of lock to use. If it is set to
		@'recommended'@, the session store's recommended lock is
		used.</dd>

	<dt>rewriteUrls</dt>
	<dd>Rewrite URLs in links in outgoing content to include the
		session key.</dd>

	<dt>idName</dt>
	<dd>The name of the cookie/parameter that contains the
		session key.</dd>
</dl>

h2. Session Application - Counter

Beyond the initial configuration, Arrow makes using sessions transparent and natural. The session
interface is set up automatically inside your applets - you need only treat it as a user-specific
hash, accessing and altering data like normal.

<?example { language: ruby, testable: true, caption: 'Declaring an applet action' } ?>
  def counter_action( txn )
    txn.session["accesses"] ||= 0
    txn.session["accesses"] += 1
    return <<-EOF
    <html>
      <head><title>Counter</title></head>
      <body>
        <p>I've seen you #{txn.session["accesses"]} times!</p>
      </body>
    </html>
    EOF
  end
<?end?>

