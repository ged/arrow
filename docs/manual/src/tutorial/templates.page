---
title: Templating
template: tutorial
filters:
  - erb
  - links
  - examples
  - editorial
  - api
  - textile
---

h1. Tutorial: Templating

Putting code and html together (either html in the code or vice versa) becomes unwieldy and ugly
after a certain level of complexity (a little after "hello world"), and for this reason, web
developers have traditionally used templates to separate off all the display work. There is debate
over exactly how much power a templating system should have (e.g., should it be able to execute
arbitrary code, or only adhere to a small set of tools), and the construction of a templating system
is relatively easy, so templating systems are many and diverse. We have included with Arrow our own
templating system - complete, extensible and (we think) intuitive - but have also made it easy for
you to use any other templating system. If you already have a favorite, and have no interest in
seeing another (even if you might like it), you can skip past the tutorial on ours and learn "how
to use your own":#others

h2. Arrow::Template

h3. Syntax

The Arrow Templating System uses preprocessing tags to distinguish template directives. These are
both @<?...?>@ and @[?...?]@. The square bracket version is meant to be
used inside of other html tags (e.g., @<a href="[?attr link?]">@...)

The basic format for a preprocessing tag is: @<?command arguments ?>@


h2. Templated Applets - Hello World (templated)

First, we need to tell Arrow what templating system to use, where to look for templates, and how to
cache them:

<?example { language: yaml, test: true, caption: Template config section } ?>
templates: 
  loader: Arrow::Template
  path:
    - templates
    - "/www/templates"
  cache: true
  cacheConfig: 
    maxObjSize: 131072
    maxNum: 20
    expiration: 36
    maxSize: 2621440
<?end?>

Some highlights (see "the configuration part of the tutorial":advanced-config.html for the full
details):

table(line-comments).
|_. line |_. description |
|=. 2 | use Arrow templating |
|=. 3 | The @path@ config item takes one or more directories to search when loading a template. Any
templates which aren't loaded via an absolute path are searched for relative to the paths in the
@templates.path@. |
|=.6â€“7| Turn on caching and set up the LRU cache |

Now declare the templates your applet will use:

<?example { language: ruby, test: true, caption: Loading a few templates } ?>
class HelloWorldApplet < Arrow::Applet
    template :hello => 'hello/world.tmpl',
	         :main => 'main.tmpl'
end
<?end?>

When the applet is running, it can now load the appropriate template by using its @#load_template@
method and passing the key assigned to the template it wishes to load. You can then fill it with
data and make it the return value of an action:

<?example { language: ruby, test: true, caption: "To render a template, just return it from an action" } ?>
class TimedGreetingWorldApplet < Arrow::Applet

	def templated_action( txn, *args )

		# Get a copy of the ':hello' template
	    templ = self.load_template( :hello )

		# Fill in some values
	    templ.txn = txn
	    templ.applet = self
		templ.time = Time.now
		templ.greeting_recipient = "World"

	    return templ
	end

end
<?end?>

So now we need to create a @/www/templates/hello-world.tmpl@ file made to display our excitingly
original page.

<?example { language: xml, caption: A page template } ?>
<html>
  <head>
	<title>Timed Greeting</title>
  </head>
  <body>

	<?if time.hour > 4 && time.hour < 12 ?>
	<h1><?attr message ?></h1>

  </body>
</html>
<?end?>

Which is, for the most part, just static XHTML that will be displayed verbatim. The template
directives designate places where the display will be determined by the data that had been saved
into the Arrow::Template object in the action itself. This template makes use of the @attr@, @call@,
@if@, and @include@ directives. Here's the list of all the directives that come with Arrow.

h3. The Directives

<notextile>
<dl>
  <dt>attr</dt>
  <dd class="format">
	<samp>&lt;?attr <var>attribute</var> ?&gt;</samp><br />
	<samp>&lt;?attr "<var>fmtstring</var>" % <var>attribute</var> ?&gt;</samp>
  </dd>
  <dd>A simple directive similar to <code>attr_accessor</code> in Ruby,
  this defines a method <var>attribute</var> on the template object which can
  be used to insert one or more objects into the template. Each object
  will be stringified and then joined together with the empty string,
  and the resultant String will replace each instance of the
  <code>&lt;attr&gt;</code> tag. If the tag specified a
  <var>fmtstring</var>, it will be used in the stringification instead
  of <code>#to_s</code>.</dd>

  <dt>call</dt>
  <dd class="format">
    <samp>&lt;?call <var>attribute</var>.<var>method</var> ?&gt;</samp><br />
	<samp>&lt;?call "<var>fmtstring</var>" % <var>attribute</var>.<var>method</var> ?&gt;</samp><br />
    <samp>&lt;?call <var>attribute</var>.<var>method</var>(<var>args</var>) ?&gt;</samp>
  </dd>
  <dd>This directive also defines a method of the template object, but
  also specifies one or more methods that should be called on the
  inserted objects before replacing the tag.</dd>

  <dt>set</dt>
  <dd class="format">
	<samp>&lt;?set <var>attribute</var> <var>value</var> ?&gt;</samp><br />
	<samp>&lt;?set <var>attribute</var> <var>value</var>.<var>method</var> ?&gt;</samp><br />
	<samp>&lt;?set <var>attribute</var> <var>value</var>.<var>method</var>(<var>args</var>) ?&gt;</samp>
  </dd>

  <dd>Sets template variable <var>attribute</var> to the specified
  <var>value</var>, which will then be accessible through the rest of
  the template.</dd>

  <dt>escape</dt>
  <dd class="format"><samp>&lt;?escape
	<var>attribute</var>.<var>method</var> ?&gt;</samp></dd>
  <dd>Acts like the <code>&lt;call&gt;</code> directive, but
  HTML-escapes the String just before it is inserted into the output
  (e.g., turns all <code>&lt;</code> and <code>&gt;</code> characters
  into into the corresponding <code>&amp;lt;</code> and
  <code>&amp;gt;</code> entities).</dd>

  <dt>urlencode</dt>
  <dd class="format"><samp>&lt;?urlencode
	<var>attribute</var>.<var>method</var> ?&gt;</samp></dd>
  <dd>Acts like the <code>&lt;call&gt;</code> directive, but URL-encodes
  the String just before it is inserted into the output.</dd>

  <dt>if/elsif/else</dt>
  <dd class="format">
	<samp>
	  &lt;?if <var>statement</var> ?&gt;<br />
	  ...<br />
	  &lt;?elsif <var>statement</var> ?&gt;<br />
	  ...<br />
	  &lt;?else?&gt;<br />
	  ...<br />
	  &lt;?end if ?&gt;
	</samp>
  </dd>

  <dd>Your run-of-the-mill conditional flow control.  The
  <code>else</code> and <code>elsif</code>s are optional, the
  <code>elsif</code>s can be repeated any number of times (including
  zero), and the <var>statement</var> can be any template variable,
  method chain off a template variable, or regular expression match of a
  template variable (like <code>&lt;?if var.method =~ /regex/
  ?&gt;</code>).</dd>

  <dt>for</dt>
  <dd class="format">
	<samp>
	  &lt;?for <var>arglist</var> in <var>iterable</var> ?&gt;<br/>
	  ...<br/>
	  &lt;?end for ?&gt;
	</samp>
  </dd>

  <dd>For each element of the <var>iterable</var> object (i.e., an
  object that implements the <tt>Enumerable</tt> interface), the element
  is assigned to a template variable (or multiple, if appropriate), and
  the enclosed content is rendered.  The <var>arglist</var> can have
  default values (as in: <code>&lt;?for a,b=1 in a_hash ?&gt;</code>),
  array-slurping arguments (<code>*args</code>) and hashified
  arguments.</dd>

  <dd>Also defined during iteration is a template variable
  <var>iterator</var>, which is an <tt>Arrow::Template::Iterator</tt>
  object that can be used to interact with the iteration. See the API
  documentation for the <tt>Arrow::Template::Iterator</tt> class for
  more on what it can do.</dd>

  <dt>yield</dt>
  <dd class="format">
	<samp>
	  &lt;?yield <var>arglist</var> from <var>attribute</var>.<var>block_method</var> ?&gt;<br/>
	  ...<br/>
	  &lt;?end yield ?&gt;
	</samp>
  </dd>

  <dd>Calls the specified <var>block_method</var> on the given template
  <var>attribute</var>, passing a rendering function for the contained
  content as the block. Each call to the block will assign arguments to
  the <var>arglist</var> and render the content. This is a more-generic
  version of the functionality represented by the <code>for</code>
  directive, useful for calling block-accepting methods besides
  <code>#each</code>.</dd>

  <dt>import</dt>
  <dd class="format">
	<samp>
	  &lt;?import <var>attribute</var> ?&gt;<br/>
	  &lt;?import <var>attribute</var> as <var>altname</var> ?&gt;<br/>
	  &lt;?import <var>attribute</var>, <var>attr2</var> ?&gt;<br/>
	  &lt;?import <var>attribute</var> as <var>altname</var>,
	  <var>attr2</var> as <var>altname2</var> ?&gt;
	</samp>
  </dd>

  <dd>This tag causes one or more template values from a containing
  template to be imported into a subordinate one. For example, if there
  is a template that contains the attribute <var>foo</var>, rendering a
  sub-template which has <code>&lt;?import foo ?></code> in it would
  cause the sub-template's <var>foo</var> to be set to the container
  template's <var>foo</var> at the point at which it is rendered.</dd>

  <dt>export</dt>
  <dd class="format">
	<samp>
	  &lt;?export <var>attribute</var> ?&gt;<br/>
	  &lt;?end export ?&gt;
	</samp>
  </dd>

  <dd>This defines and exposes template content in a subordinate template, up
  to its containing templates.  Useful for bubbling values up through an applet
  delegation chain, such as HTML titles.</dd>

  <dt>include</dt>
  <dd class="format">
	<samp>
	  &lt;?include <var>filename</var> ?&gt;<br/>
	  &lt;?include <var>filename</var> as <var>name</var> ?&gt;
	</samp>
  </dd>

  <dd>This directive is replaced either with the contents of the
  template specified (first form), or a placeholder attribute with the
  specified <var>name</var> (second form). </dd>

  <dd>The first form merges the two templates together, while the second
  keeps them separate for the purposes of interaction. For example, you
  may wish to define a generic table template called "table.tmpl", but
  include it in another template in such a way that it can be interacted
  with separately:</dd>

  <dd>
			<strong>In the template:</strong>

<pre><code>
The times for this race were:&lt;br/&gt;
&lt;?include <var>table.tmpl</var> as <var>thisrace</var> ?&gt;

Total times:&lt;br/&gt;
&lt;?include <var>table.tmpl</var> as <var>totals</var> ?&gt;
</code></pre>

		  <strong>In the applet:</strong>

<pre><code>
tmpl.thisrace.rows << ["fred" => 1.10], ["wilma" => "1.05"]
tmpl.totals.rows << ["fred" => 5.77], ["wilma" => 4.95]
</code></pre>
		  </dd>

		</dl>
</notextile>



h2. Renderers

(Describe the details of rendering, and how to influence how things are rendered.)

h2. Adding Directives

(Describe in general terms how to add directives by putting files in an @arrow/template/@ directory)

h3. Sample Directive

(How to build a template directive, step-by-step)

h2. Using Other Templating Systems

(Describe how to change templating systems by using a different @template.loader@)

h3. Writing a Loader

(How to write a loader for your templating system of choice)

