--- 
title: Applets and Applications
template: tutorial
filters:
  - erb
  - examples
  - textile
---

h1. Applets

The @Arrow::Applet@ class is the main workhorse of the Arrow framework; it, in concert with
@Arrow::Transaction@, provides most of the functionality that application developers will be
concerned with.

Applets make up the functionality of an application; each distinct task that a user can do is
concisely expressed as a separate class which inherits from @Arrow::Applet@. The base @Applet@ class
defines much of what is covered in the rest of this tutorial, so if you don't like the templating
system or the argument validation system built into the base applet class, you can easily define
your own that uses something else instead without having to give up any of the other functionality.


For now, though, this tutorial will focus on the default functionality, with mention made of how
to override or replace it where appropriate.

h2. The Parts of an Applet

An Arrow applet is made up of *a signature*, one or more *actions*, and an optional *delegator
method*.


h3. The Signature

The *signature* is a Hash of metadata which describes the applet to the app framework, and includes
information like name and author, and configures some of the logic and functionality provided by the
@Arrow::Applet@ class itself. An Applet's signature is set by calling class methods in the
definition to configure it.

Here's an example of a basic applet defining several values of its signature:

<?example { language: ruby, caption: "Setting applet signature values" } ?>
# Applet signature
applet_name "Hello World"
applet_description "This is yet another implementation of Hello World"
applet_maintainer "ged@FaerieMUD.org"
applet_version '1.2.2'

default_action :greet
template :greeting => 'templates/greeting.tmpl'
<?end?>

h4. Signature Values

No element of the signature is mandatory: the base applet class will try to guess appropriate values
for any missing elements. The values the base applet class understands are listed below along with
what they do.

<dl class="linelist signature-items">
  <dt>name</dt>

  <dd>The name of the applet, used for display purposes in introspection and for automated bug- or
  error-reporting. Defaults to the name of the Applet class.</dd>

  <dt>description</dt>

  <dd>A brief explanation of what the applet does or is for; used in introspection utilities.
  Defaults to @"(none)"@.</dd>

  <dt>maintainer</dt>

  <dd>The RFC822-formatted email address of the person to praise and/or blame for the functioning of
  the applet. This is intended to be used in introspection utilities and also for automated bug- or
  error- reporting. Defaults to whatever the <code>ServerAdmin</code> of Apache is set to, or the
  empty string if the <code>ServerAdmin</code> setting is not available.</dd>

  <dt>default_action</dt>

  <dd>When no action is specified by the incoming request, this determines which one will be used.
  Defaults to <code>'_default'</code>.</dd>

  <dt>templates</dt>

  <dd>This should be set to a hash filled with file names of the templates that will be used by this
  applet. Templates listed in this hash can later be loaded via the <code
  class="method-name">#load_template</code> method of the applet object. Defaults to an empty hash.
  See the <a href="tutorial/templates.html">templating tutorial</a> for more coverage of this</dd>

  <dt>version</dt>

  <dd>The version of the applet. If the applet defines any of the <code
  class="constant-name">Version</code>, <code class="constant-name">Revision</code>, <code
  class="constant-name">SVNId</code>, or <code class="constant-name">Rcsid</code> constants, the value it
  contains is used as a default. Otherwise the mtime of the file which contains the applet is
  used.</dd>

  <dt>vargs</dt>
  <dd>A hash containing profiles for the built in form validator, one
  per action. See the <a href="tutorial-validation.html">input
  validation section</a> of the tutorial for more.</dd>
</dl>

h3. Actions

Actions provide the actual functionality of the applet. An action is
just a specially-named method which corresponds to a part of the URI the
client requests, and represents a step or phase of the applet's
execution.

h4. Action Method Form

Each action method's name must end with @_action@. For example, if you're defining the 'display'
action, you'd define a method called @display_action@:

<?example { language: ruby, caption: "Defining an action" } ?>
def display_action( txn, *args )
  # Do something with the txn
  return "Some content"
end
<?end?>

Action methods are called with an @Arrow::Transaction(class-name)@ object and zero or more arguments
that can be passed REST-style in the URI. Only the transaction argument is mandatory; defining an
action method without parameters will result in an error.

You can also use the @def_action(method-name)@ shortcut to define an action to make them easily
distinguishable from other methods you may define in your applet class:

<?example { language: ruby, caption: "Defining the same action with `def_action'" } ?>
def_action :display do |txn, *args|
  # Do something with the txn
  return "Some content"
end
<?end?>

The two declarations are equivalent.

h4. Action Execution

When an action method is called, it should do the necessary processing to build the response data
and return it to its caller. This return value will then be converted to a @String(class-name)@ (via
@#to_s(method-name)@) and sent to the client after doing the necessary header senting and Apache
housekeeping. Returning a non-true value causes a @DECLINED@ status to be sent back to Apache. This
can be used to pass control to a further handler if the action determines it cannot handle the
request.

For return behaviors outside of these (for example, altered headers or a different status), it is
necessary to access the @Apache::Request(class-name)@ object directly (through @txn.request@ in the
examples above). See the "mod ruby":http://modruby.net/ site for more information on what to do with
this.


h2. A simple applet - Hello

We'll start with a dead-simple applet that doesn't really do much of anything useful. In keeping
with tradition, of course, this applet will be yet another implementation of 'Hello World':

<?example { language: ruby, caption: "A Hello World applet" } ?>
#
# A "hello world" Arrow applet
#

require 'arrow/applet'

# Define the applet class; inherit from the base applet class.
class Hello < Arrow::Applet

  # Applet signature
  applet_name "Hello World"
  applet_description "This is yet another implementation of Hello World"
  applet_maintainer "ged@FaerieMUD.org"
  
  default_action :greet
  
  # Define the 'greet' (default) action
  def greet_action( txn )
    return <<-EOF
	<html>
	  <head><title>Hello</title></head>
	  <body><p>Hello, world.</p></body>
	</html>
    EOF
  end

end
<?end?>

The applet's class is @Hello(class-name)@, which means to install it into the server's URI-space
you'd add a line like the following to the @layout@ hash of the @applets@ section of the arrow
config file:

<?example { language: yaml, caption: "Installing the Hello World applet." } ?>
applets:
  layout:
    "/hello": Hello
<?end?>

After the config has been loaded, requests for @/<arrow-root>/hello/greet@ (and simply
@/<arrow-root>/hello@, because @greet@ is the default action) will return something that looks like:

h2. Passing REST-style Arguments

Now let's add a bit of personalization to the applet. Perhaps it should be able to generate
customizable messages in addition to greeting the entire world. To do this, we can make the @greet@
action take an additional argument specified in the URL:

<?example { language: ruby, caption: "" } ?>
  # Define the 'greet' (default) action
  def greet_action( txn, name=nil )
    name ||= "world"

    return <<-EOF
	<html>
	  <head><title>Hello</title></head>
	  <body><p>Hello, #{name.capitalize}.</p></body>
	</html>
    EOF
  end
<?end?>

Calling the applet with a URL like @/hello/greet/Dave@ will now cause it to greet only Dave instead:

<div class="screenshot">
  <img src="hello-dave-sshot.png" alt="screenshot" height="324" width="464" />
</div>

Note that we're required to call the action '@greet@' explicitly to be able to pass in URL-style
arguments.


h2. Applet Chaining

As mentioned before, applets can also be chained together to build more complex functionality. Apps
which are intended to be chained through should define a @#delegate@ method. This delegation method
is called by the broker when the applet is being chained through, and is responsible for calling
@yield@ when (if) it wishes to pass control to the next applet in the chain, passing any desired
additional arguments. Delegation methods are invoked with the same arguments as action methods,
including any added by previous applets in the chain.

h3. ?(delegation example)?

h2. Special Applets

h3. Error Handlers

h3. Missing Applet Applet
